syntax = "proto3";

package server_segment;

// compile with the following command:
// python -m grpc_tools.protoc -I=proto/ --python_out=slower/proto/ --pyi_out=slower/proto/ --grpc_python_out=slower/proto/ proto/server_segment.proto
// also update `slower.proto.server_segment_pb2` in `server_segment_pb2_grpc.py`

// The server segment service definition.
service ServerSegment {

  rpc ServePredictionRequest (BatchPredictionIns) returns (BatchPredictionRes) {}
  rpc ServeGradientUpdateRequest (GradientDescentDataBatchIns) returns (GradientDescentDataBatchRes) {}
  rpc UpdateServerSideModelRequests (stream GradientDescentDataBatchIns) returns (UpdateServerSideModelRes) {}
  rpc UForward(DataBatchForward) returns (DataBatchForward) {}
  rpc UBackward(DataBatchBackward) returns (DataBatchBackward) {}

}

message BatchPredictionIns {
  bytes embeddings = 1;
  ControlCode control_code = 2;
}

message BatchPredictionRes {
  bytes predictions = 1;
  ControlCode control_code = 2;
}

message GradientDescentDataBatchIns {
  bytes embeddings = 1;
  bytes labels = 2;
  ControlCode control_code = 3;
}

message GradientDescentDataBatchRes {
  bytes gradient = 1;
  ControlCode control_code = 2;
}

message UpdateServerSideModelRes {
  ControlCode control_code = 1;
}

enum ControlCode {
  OK = 0;
  DO_CLOSE_STREAM = 1;
  STREAM_CLOSED_OK = 2;
  ERROR_PROCESSING_STREAM = 3;
}

message DataBatchForward {
  bytes embeddings = 1;
  ControlCode control_code = 2;
}

message DataBatchBackward {
  bytes gradient = 1;
  ControlCode control_code = 2;
}
